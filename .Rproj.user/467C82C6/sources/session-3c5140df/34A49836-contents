---
title: "Введение в автоматизацию обработки данных на R"
subtitle: "BioStat 2024/25"
author: "Виктория Пороло"
date: "`r Sys.Date()`"
output: 
  html_document:
    toc: true # table of contents
    toc_float: true # table of contents floating 
    toc_depth: 3 # depth of table of contents
    number_sections: true # numbering sections
    toc_title: "Table of contents" # title of the table of contents
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
library('readr')
library('tibble')
library('dplyr')
library('stringr')
library('tidyr')
library('stringi')
library('flextable')
```

# 3.2 Разбор полезных пакетов

-   purrr : Дополнительные функции для функционального программирования
-   dplyr : Базовая грамматика манипуляции данных
-   tidyverse : Метапакет, содержащий в себе основные пакеты для автоматизации анализа данных
-   readr, readxl, haven : Чтение данных
-   tibble : Улучшенный аналог data.frame
-   tidyr : Приведение данных к аккуратному виду
-   ggplot2, ggpubr : Визуализация данных

# 4.1 Функции для чтения и записи файлов

```{r read_tsv}
 data <- read_delim("data/data_tsv.tsv", delim = NULL, quote = "\"", na = c("", NA), skip = 0, n_max = Inf, col_names = TRUE)
```

# 5.1 Базовые статистики

1)  Функция mean()

```{r mean_func}
value <- list(
  c(76, 65, 71, 16, 60, 29, 71, 46, 45, 41),
  c(-19, -9, 19, 5, -14, 0, 34, -8, 34, 24, -11, 8, 33, 12, -6),
  c(-13, 19, -24, NA, 30, 64, -53, NA, 50, 31, -58, -34, -3, -34, 77),
  c(1, -1, 5, -12, -12, 3, 8, -10, 0),
  c(NA, NA, NA, NA, NA, NA, 3, NA, NA),
  c(-2, 16, -3, 16, -9, 7, 31)
)

mean_values <- numeric(length(value))


for (i in 1:length(value)) {
  mean_values[i] <- mean(value[[i]], na.rm = TRUE) 
}
print(mean_values)  

```

2)  Функция median()

```{r median_func}
value <- list(
c(-92, -50, 54, 55, 84, 52, -55, -23, 36, -11, 22, 11, -7),
c(-91, -33, 13, 34, 34, 75, -80, -35, -90, -72, 70, 67, -100, -94, -18),
c(-15, 71, 77, 36, 66, -21, -48, -8),
c(19, 89, 78, 38, 8, 17, 25, 60, 8, 43, 29, 6, 62, 41, 69, 97, 61, 83, 25, 24),
c(1, 9, NA, 88, 2, NA, 42, NA, 4, 68, NA)
)

median_values <- numeric(length(value))

for (i in 1:length(value)) {
  median_values[i] <- median(value[[i]], na.rm = TRUE) 
}
print(median_values)  
```

3)  Функция min&max

```{r min_max}
value <- list(
c(90.48, 31.16, 44.4, 21.94, 84.37, 53.15, 81.15, 47.86, 63.23, 46.75, 102.73),
c(60.22, 31.91, 72.71, 52.49, 46.21, 60.39, 60.09),
c(48.11, 45.3, 58.42, 51.64, 62.07, 57.26, 49.69, 93.29, 81.18, 44.78, 55.1, 76.74, 58.08),
c(17.24, 35.77, 57.57, 30.15, 43.27, 77.56, 72.19, 40.45, 46.2, 39.92),
c(68.92, 44.15, 34.2, 34.12, 37.7, 73.95, 36.9, 59.26, 31.06, 55.79, 73.92, 68.04, 53.73, 90.7, 39.66)
)


min_max_values <- matrix(NA, nrow = length(value), ncol = 2)


for (i in 1:length(value)) {
  min_max_values[i, 1] <- min(value[[i]], na.rm = TRUE) 
  min_max_values[i, 2] <- max(value[[i]], na.rm = TRUE) 
}


colnames(min_max_values) <- c("Min", "Max")
rownames(min_max_values) <- c("Vector1", "Vector2", "Vector3", "Vector4", 'Vector5')

print(min_max_values)
```

4)  Функция quantile()

```{r quantile_func}
value <- list(
c(80.94, 44.46, 46.33, 65.1, 66.42, 104.43, 53.15, 48.41, 12.88, 51.1, 43.03, 40.3, 33.71, 55.1, 22.17),
c(26.17, 97.73, 24.81, 53.62, 87.72, 45.19, 45.7, 69.63, 36.76, 7.17),
c(63.92, 35.85, 26.9, 48.92, 43.1, 66.94, 47.06, 56.54, 29.1, 58.88),
c(32.05, 93.85, 85.52, 56.69, 23.69, 11.29, 51.44, 63.09, 65.65, 35.73, 60.15, 30.93, -4.2)
)

quantile_values <- matrix(NA, nrow = length(value), ncol = 5)


for (i in 1:length(value)) {
  quantile_values[i,] <- quantile(value[[i]])  
}
colnames(quantile_values) <- c("0%", "25%", "50%", "75%", "100%")

rownames(quantile_values) <- c("Vector1", "Vector2", "Vector3", "Vector4")

print(quantile_values)
```

5)  Функция var&sd

```{r var_sd_func}
value <- list(
c(47.44, 62.44, 20.44, 72.75, 77.86, 13.74, 28.2, 50.47, 59.19, 69.04),
c(49.31, 44.47, 14.04, 44.43, 49.18, 40.73, 44.65, 41.91, 80.38, 80.09),
c(57.96, 20.81, 8.92, 14.03, 61.02, 25.69, 21.22, 49.56, 25.64, 28.31),
c(76.22, 65, 19.69, 29.84, 37.18, 70.93, 64.78, 61.66, 49.03, 51.56),
c(92.11, 56, 47.89, 62.96, 47.41, 37.05, 73.96, 53, 52.37, 85.23)
)

var_sd_values <- matrix(NA, nrow = length(value), ncol = 2)


for (i in 1:length(value)) {
  var_sd_values[i, 1] <- var(value[[i]], na.rm = TRUE) 
  var_sd_values[i, 2] <- sd(value[[i]], na.rm = TRUE) 
}


colnames(var_sd_values) <- c("Дисперсия", "Стандартное отклонение")


print(var_sd_values)
```

6)  Функция IQR()

```{r IQR_func}
value <- list(
c(80.94, 44.46, 46.33, 65.1, 66.42, 104.43, 53.15, 48.41, 12.88, 51.1, 43.03, 40.3, 33.71, 55.1, 22.17),
c(26.17, 97.73, 24.81, 53.62, 87.72, 45.19, 45.7, 69.63, 36.76, 7.17),
c(63.92, 35.85, 26.9, 48.92, 43.1, 66.94, 47.06, 56.54, 29.1, 58.88),
c(32.05, 93.85, 85.52, 56.69, 23.69, 11.29, 51.44, 63.09, 65.65, 35.73, 60.15, 30.93, -4.2)
)

IQR_values <- numeric(length(value))

for (i in 1:length(value)) {
  IQR_values[i] <- IQR(value[[i]], na.rm = TRUE, type = 7) 
}
print(IQR_values)  
```

7)  Стандартная ошибка среднего sd(x)/sqrt(length(x))

```{r standard_error_func}
value <- list(
c(47.44, 62.44, 20.44, 72.75, 77.86, 13.74, 28.2, 50.47, 59.19, 69.04),
c(49.31, 44.47, 14.04, 44.43, 49.18, 40.73, 44.65, 41.91, 80.38, 80.09),
c(57.96, 20.81, 8.92, 14.03, 61.02, 25.69, 21.22, 49.56, 25.64, 28.31),
c(76.22, 65, 19.69, 29.84, 37.18, 70.93, 64.78, 61.66, 49.03, 51.56),
c(92.11, 56, 47.89, 62.96, 47.41, 37.05, 73.96, 53, 52.37, 85.23)
)

standard_errors <- numeric(length(value))

for (i in 1:length(value)) {
  standard_errors[i] <- sd(value[[i]], na.rm = TRUE) / sqrt(sum(!is.na(value[[i]])))  
}

print(standard_errors)
```

8)  Length()

```{r Length_func}
vektor <- c(5,6,68, NA,2,8, NA)
length(vektor)
sum(!is.na(vektor))
sum(is.na(vektor))
```

# 5.2 Обобщающие функции статистик

**summary()**

```{r summary_func}
summary(data)
```

**psych::describe()**

```{r desxribe_func}
df <- readr::read_rds('data/numeric_data.rds')

psych::describe(df)
```

**table(), prop.table()**

-   table() : Выводит абсолютные частоты
-   prop.table() : Принимает на вход таблицу абсолютных частот
-   describe() : Находится в пакете psych()

# 6.1 tibble вместо data.frame как формат данных

**Ленивая оценка аргументов**

```{r tibble_func}

my_tibbles <- list(
function ()tibble(var_1 = c(1:10) - 100, var_2 = 1:100),
function ()tibble(var_first = 1:10, var_second = ifelse(var_first < 5, var_first + 100, var_first)),
function ()tibble(`var 2` = 10:1, `var 3` = `var 1` - 10),
function ()tibble(var_first = 1:10, var_first = ifelse(var_first < 5, var_first + 100, var_first)),
function ()tibble(var = 1:10, var = var - 10000000),
function ()tibble(`var 1` = 1:10, `var 2` = `var 1` * 100)
)


results <- logical(length(my_tibbles))


for (i in seq_along(my_tibbles)) {
  results[i] <- tryCatch({

    my_tibbles[[i]]()  
    TRUE
  }, error = function(e) {

    FALSE
  })
}
#`tryCatch()` — это функция в R, предназначенная для обработки ошибок и управления возникающими исключениями во время выполнения кода. Она позволяет "попробовать" выполнить код и "поймать" (обработать) ошибки, если они возникают. Это особенно полезно при выполнении операций, которые могут привести к ошибкам, таким как чтение данных из файла или выполнение вычислений с потенциально некорректными входными данными.


print(results)
```

**View()**

```{r view_func}
View(data)
```

**tibble::add_column()**

```{r add_column_func}
data %>% 
   add_column(new_column = " (づ ◕‿◕ )づ ", .before = 1)
```

**tibble::add_row()**

```{r add_row_func}
data %>% 
add_row(`Группа` = "0", `Возраст` = 9000, .before = 1)
```

**dplyr::row_number()**

```{r row_number_func}
data %>%
mutate(ID = row_number())
```

# 6.2 Склеивание

**dplyr::bind_cols()**

```{r bind_cols_func}
data_1 <- tibble(var1 = 1:10, var2 = rep(c("Group 1","Group 2"), 5))
data_2 <- tibble(var2 = rbeta(10, 1, 5), var3 = rnorm(10))
data_3 <- tibble(var4 = 100:91, var5 = rep(c("Young","Middle age"), 5))
data_1 %>% bind_cols(data_2) %>% bind_cols(data_3)
```

**dplyr::bind_rows()**

```{r bind_rows_func}
data_1 <- tibble(var1 = 'var1', var2 = 'var2', var3 = 'var3')
data_2 <- tibble(var1 = 'var1', var2 = 'var2')
data_3 <- tibble(var1 = 'var1', var2 = 'var2')
data_1 %>% bind_rows(data_2) %>% bind_rows(data_3)
```

**dplyr::left_join(), dplyr::right_join(), dplyr::inner_join(), dplyr::full_join()**

-   full_join() : просто включает все строки, которые есть хотя бы в x или y
-   left_join() : включает все строки, которые есть в x, отбрасывая из y те, которых нет
-   inner_join() : включает все строки, которые есть и в x и y
-   right_join() : включает все строки, которые есть в y, отбрасывая те, которых там нет

# 6.3 Группировка

**dplyr::group_by()**

```{r group_by_func}
data %>% group_by(`Группа`)
```

**base::split()**

```{r split_func}

data %>% split(~`Группа`)
```

**dplyr::rowwise()**

```{r rowwise_func}
data %>%
rowwise() %>%
mutate(`Среднее по базофилам за два визита` = mean(c(`Базофилы_E1`,`Базофилы_E2`))) %>%
ungroup() %>%
select(`Базофилы_E1`, `Базофилы_E2`,`Среднее по базофилам за два визита`)
```

# 6.4 Выбор столбцов

**dplyr::select(), where()**

```{r select_func}

data <- read_tsv('data/data_tsv.tsv')
value <- list(
function ()data %>% select(`Группа`, function(x) !is.factor(x)),
function ()data %>% select(`Группа крови`, `Возраст`, function(x) anyNA(x)),
function ()data %>% select(`Группа`, (function(x) is.factor(x)) | where(function(x) is.numeric(x))),
function ()data %>% select(function(x) any(str_detect(x, "Жен"))), #ERROR
function ()data %>% select(where(is.numeric) & where(function(x) sd(x, na.rm = TRUE) > 1)),
function ()data %>% select(`Группа крови`, `Возраст`, function(x) anyNA(x)), #ERROR_вариант_без_апострофов
function ()data %>% select(function(x) sd(x, na.rm = TRUE) > 1),#ERROR
function ()data %>% select(`Пол`, `Группа`, `Базофилы_E1`)
)

results <- logical(length(value))

for (i in seq_along(value)) {
  results[i] <- tryCatch({

    value[[i]]()  
    TRUE
  }, error = function(e) {

    FALSE
  })
}

print(results)

#программа работает, ответ неправильный <:^)
```

**tidyselect::contains(), tidyselect::matches(), tidyselect::starts_with(), tidyselect::ends_with()**

```{r contains_matches_starts_with_ends_with_func}
data %>% select(contains('_E1'))

data %>% select(matches('_E\\d{1}'))

data %>% select(starts_with('Б'))

data %>% select(ends_with('E2'))
```

**tidyselect::all_of(), tidyselect::any_of()**

```{r all_any_of_func}

#variables <- c( 'Базофилы_E1', 'Эозинофилы_E1', 'Гемоглобин_E1')
#data %>% select(variables)

variables <- c( 'Базофилы_E1', 'Эозинофилы_E1', 'Гемоглобин_E1')
data %>% select(all_of(variables))

variables <- c( 'Базофилы_E1', 'Эозинофилы_E1', 'Гемоглобин_E1')
data %>% select(any_of(variables))
```

**tidyselect::everything()**

```{r everything_func}
data %>% select(`Пол`, `Эритроциты_визит 1` = `Эозинофилы_E1`, everything())
```

# 6.5 Выбор строк

**dplyr::slice()**

```{r slice_func}

data %>% slice(1:10)

data %>% slice_head(n = 10)

data %>% slice_tail(prop = 0.1)

data %>% slice_sample(prop = 0.15)

data %>% slice_min(`Возраст`)

```

**dplyr::filter()**

```{r filter_func}
data %>% filter(`Пол` == 'Женский')

data %>% filter( `Группа крови` %in% c('A (II)', 'O (I)') & `Группа` != ' Группа 1')

data %>% filter(between(`Возраст`, 31, 34))

data %>% filter(near(`Эозинофилы_E1`, 3.38, tol = 0.1))
```

**tidyselect::all_of(), tidyselect::any_of()**

```{r all_any_of_func}
data %>% filter(if_all(.cols =contains('Базофилы'), .fns = function(x) x > 1.5))

data %>% filter(if_any(.cols =contains('Базофилы'), .fns = function(x) x > 1.5))
```

**group_by**

```{r}
data %>% group_by(`Группа`) %>% filter(`Возраст` > 36)
```

# 6.6 Мутация переменных

**dplyr::mutate()**

```{r mutate_func}
#1
data %>% 
  mutate(`Женщины с четвертой группой крови` = ifelse(`Пол` == 'Женский' & `Группа крови` == 'AB (IV)', 'ДА', 'НЕТ')) %>% 
  select(`Женщины с четвертой группой крови`, everything()) %>% 
  arrange(`Женщины с четвертой группой крови`)

#2
tibble(var1 = 1:10,
       var2 = var1 + 1.123) %>%
  mutate(var_sum = var1 + var2,
         var_minus = var1 - var2,
         var_multiple = var1 * var2,
         var_divide = var1 / var2,
         var1log = log(var1),
         var1log1p = log1p(var1),
         var1exp = exp(var1log),
         var1exm1 = expm1(var1log1p),
         var2round = round(var2, 2),
         var2ceil = ceiling(var2), 
         var2floor = floor(var2)) %>%
  glimpse()

#3
data %>% mutate(`Группа` = NULL)

#4 dplyr::case_when()

data %>% mutate(`Возрастная группа` = case_when(`Возраст` < 20 ~ '<20',
                               between(`Возраст`, 20, 30) ~ '20 - 30',
                               `Возраст` > 30 ~ '>30') %>% as.factor()) %>%
  select(`Возраст`, `Возрастная группа`)

#5 tidyr::na_if(), tidyr::replace_na()

data %>% mutate(`Группа крови` = `Группа крови` %>% as.character() %>% replace_na('Нет данных') %>% as.factor())

data %>% mutate(`Группа крови` = `Группа крови` %>% na_if('в (III)'))
```

**Функция across() для применения других функций к подмножеству переменных**

```{r across_func}
data <- read_tsv('data/data_tsv.tsv')
value <- list(
function () data %>% mutate(across(!contains("E1") & !c(`Группа`, `Возраст`), function(x) x ^ 2)),
function () data %>% mutate(across(function(x) any(near(x, 0.5, tol = 0.1)), function(x) x + 1000)),
function () data %>% mutate(across(!contains("E1") & !c(`Группа`, `Возраст`) & !where(is.factor), function(x) x ^ 2), across(contains("E2"), function(x) x * 100)),
function () data %>% mutate(across(!contains("E1"), function(x) str_c(x, " + некая строка")))
)

results <- logical(length(value))

for (i in seq_along(value)) {
  results[i] <- tryCatch({

    value[[i]]()  
    TRUE
  }, error = function(e) {

    FALSE
  })
}

print(results)
```

**Итерация по строкам**

```{r rowwise_func}
data %>% 
  rowwise() %>% 
  mutate(`Среднее по базофилам` = mean(c_across(contains('Базофилы')))) %>%
  ungroup() %>%
  select(contains('Базофил'))
```

**Применение mutate() к сгруппированным датафреймам**

```{r group_by_mutate-func}
data %>% 
  group_by(`Группа`) %>%
  mutate(across(contains('Базофилы'), function(x) x - mean(x, na.rm = TRUE))) %>% 
  ungroup() %>% 
  select(`Группа`, contains('Базофилы'))
```

# 6.7 Переименование

**dplyr::rename()**

```{r rename_func}
data %>%
  rename(`Эритроциты_визит 1` = `Эритроциты_E1`, `Эритроциты_визит 2` = `Эритроциты_E2`) %>%
  select(contains('Визит'))
```

**dplyr::rename_with(), stringi::stri_replace_all_regex()**

```{r}
library(stringi)

#1
data %>% 
  rename_with(function(x)  x %>%
                stri_replace_all_regex(c('_E1', '_E2'), c('_Визит 1', '_Визит 2'), vectorize_all = FALSE)) %>%
  glimpse()

#2 
data %>%
  rename_with(.cols = where(is.numeric), .fn = function(x) str_c(x, 'КОЛИЧЕСТВЕННАЯ ПЕРЕМЕННАЯ')) %>%
  glimpse()

#3
new_name <- 'afpkg'
data %>% 
  rename(!! new_name := `Группа`) %>%
  glimpse()
```

# 6.8 Сортировка

**dplyr::arrange()**

```{r arrange_func}
#1
data %>% arrange(`Возраст`)

#2 
data %>% arrange(`Группа крови`)

#3
data %>% arrange(desc(`Рост`))

#4 
data %>% arrange(desc(`Рост`), `Возраст`)
```

**Сортировка внутри групп**

```{r arrange_group_by}
data %>% group_by(`Группа`) %>% arrange(`Возраст`, .by_group = TRUE)
```

# 6.9 Повороты датафреймов

**tidyr::pivot_longer()**

```{r pivot_longer_func}
data %>% select(`Группа`, contains('E1')) %>% pivot_longer(!`Группа`)

#"Теперь у нас есть переменная имён переменных, а также переменная с их значениями. Позже нам это пригодится." --- не очень понятное объяснение. 
```

**tidyr::pivot_wider()**

```{r pivot_wider_func}
data %>% 
  select(`Группа`, contains('E1')) %>%
  mutate(ID = row_number()) %>%
  pivot_longer(!c(`Группа`, ID)) %>%
  pivot_wider(id_cols = ID)
```

# 6.10 Выбор уникальных сочетаний

**dplyr::distinct()**

```{r distinct_func}
data %>% distinct(`Группа`, .keep_all = TRUE)
```

# 6.11 Разделение и склеивание

**tidyr::separate()**

```{r separate_func}
tibble(var1 = rep(paste0('first part', '_', 'second part'), 10)) %>%
  separate(var1, into = c('var1', 'var2'), sep = '_')
```

**tidyr::unite()**

```{r unite_func}
tibble(var1 = rep(paste0('first part', '_', 'second part'), 10)) %>%
  separate(var1, into = c('var1', 'var2'), sep = '_')%>%
  unite('new_var', var1, var2, sep = ' AND ')
```

# 6.12 Расчёт статистик

**dplyr::summarise()/dplyr::summarize()**

```{r summarise_func}
data %>% 
  select(`Группа`, where(is.numeric)) %>%
  group_by(`Группа`) %>%
  summarise(across(where(is.numeric), function(x) mean(x, na.rm = TRUE)))
```

**Формирование статистической таблицы для количественной переменной**

```{r statistics_list}
statistics <- list(
      `Количество субъектов` = ~length(.x) %>% as.character(),
      `Количество (есть данные)` = ~sum(!is.na(.x)) %>% as.character(),
      `Нет данных` = ~sum(is.na(.x)) %>% as.character(),
      `Ср. знач.` = ~ifelse(sum(!is.na(.x)) == 0, "Н/П*", mean(.x, na.rm = TRUE) %>% round(2) %>% as.character()),
      `Станд. отклон.` = ~ifelse(sum(!is.na(.x)) < 3, "Н/П*", sd(.x, na.rm = TRUE) %>% round(2) %>% as.character()),
      `95% ДИ для среднего` = ~sd(.x, na.rm = TRUE) %>% round(2) %>% as.character(),
      `мин. - макс.` = ~ifelse(sum(!is.na(.x)) == 0, "Н/П*", paste0(min(.x, na.rm = TRUE) %>% round(2), " - ", max(.x, na.rm = TRUE) %>% round(2))),
      `Медиана` = ~ifelse(sum(!is.na(.x)) == 0, "Н/П*", median(.x, na.rm = TRUE) %>% round(2) %>% as.character()),
      `Q1 - Q3` = ~ifelse(sum(!is.na(.x)) == 0, "Н/П*", paste0(quantile(.x, 0.25, na.rm = TRUE) %>% round(2), " - ", quantile(.x, 0.75, na.rm = TRUE) %>% round(2)))
)

data %>%
  select(`Группа`, where(is.numeric)) %>%
  group_by(`Группа`) %>%
  summarise(across(where(is.numeric), statistics)) %>%
  pivot_longer(!`Группа`) %>%
  separate(name, into = c('Переменная', 'Статистика'), sep = '_') %>%
  rename(`Значение` = value)
```

**Формирование статистической таблицы для категориальной переменной**

```{r statistics_chr}
data %>%
  mutate(`Группа крови` = `Группа крови` %>% as.character() %>% replace_na('Нет данных') %>% as.factor()) %>%
  select(`Группа`, where(is.factor)) %>%
  count(`Группа`, `Группа крови`) %>% 
  group_by(`Группа`) %>% 
  mutate(`Процент по группе` = (n / sum(n)) %>% round(4) %>% `*`(100) %>% str_c('%')) %>%
  ungroup() %>%
  mutate(`Процент по выборке` = (n / sum(n)) %>% round(4) %>% `*`(100) %>% str_c('%'))
```

# 7.1 Пакет flextable

**flextable_theme_merge**

```{r flextable_merge_v_h_func}
#1
statistics <- list(
      `Количество субъектов` = ~length(.x) %>% as.character(),
      `Количество (есть данные)` = ~sum(!is.na(.x)) %>% as.character(),
      `Нет данных` = ~sum(is.na(.x)) %>% as.character(),
      `Ср. знач.` = ~ifelse(sum(!is.na(.x)) == 0, "Н/П*", mean(.x, na.rm = TRUE) %>% round(2) %>% as.character()),
      `Станд. отклон.` = ~ifelse(sum(!is.na(.x)) < 3, "Н/П*", sd(.x, na.rm = TRUE) %>% round(2) %>% as.character()),
      `95% ДИ для среднего` = ~sd(.x, na.rm = TRUE) %>% round(2) %>% as.character(),
      `мин. - макс.` = ~ifelse(sum(!is.na(.x)) == 0, "Н/П*", paste0(min(.x, na.rm = TRUE) %>% round(2), " - ", max(.x, na.rm = TRUE) %>% round(2))),
      `Медиана` = ~ifelse(sum(!is.na(.x)) == 0, "Н/П*", median(.x, na.rm = TRUE) %>% round(2) %>% as.character()),
      `Q1 - Q3` = ~ifelse(sum(!is.na(.x)) == 0, "Н/П*", paste0(quantile(.x, 0.25, na.rm = TRUE) %>% round(2), " - ", quantile(.x, 0.75, na.rm = TRUE) %>% round(2)))
)

data %>%
  select(`Группа`, where(is.numeric)) %>%
  group_by(`Группа`) %>%
  summarise(across(where(is.numeric), statistics)) %>%
  pivot_longer(!`Группа`) %>%
  separate(name, into = c('Переменная', 'Статистика'), sep = '_') %>%
  rename(`Значение` = value) %>%
  flextable() %>% 
  theme_vader() %>%
  merge_v( c('Группа', 'Переменная'))

#2
tibble(var1 = c('p-value', '0.001'),
       var2 = c('p-value', '0.05')) %>%
  flextable() %>% 
  theme_vader() %>%
  merge_h(i = 1)  
```

**flextable::align_bold_italic()**

```{r flextable_align_bold_func}
tibble(`Sample`  = c('Sample text 1', 'sample Text 2', 'Sample text 3', 'sample Text 4')) %>%
  flextable() %>%
  theme_box() %>%
#  align(align = 'center', part = 'all')
  align(i = ~ str_detect(`Sample`, 'Sample'), align = 'left')%>%
  align(i = ~ str_detect(`Sample`, 'Text'), align = 'right') %>%
  width(width = 2)%>%
  bold(i = ~ str_detect(`Sample`, 'Sample'))%>%
  italic(i = ~ str_detect(`Sample`, 'Text'))
    
```

**flextable::color(), flextable::bg()**

```{r flextable_color_bg}
#1 
is_pvalue_sign <- function(x) {
  x %>% str_remove('<') %>% as.numeric() %>% `<`(0.05)
}
  
tibble('p-value' = c('<0.001', '0.38', '0.124', '0.005', '0.05')) %>%
  flextable() %>%
  theme_box() %>%
  color(i = ~ is_pvalue_sign(`p-value`), color = 'purple')

#2
is_pvalue_sign <- function(x) {
  x %>% str_remove('<') %>% as.numeric() %>% `<`(0.05)
}
  
tibble('p-value' = c('<0.001', '0.38', '0.124', '0.005', '0.05')) %>%
  flextable() %>%
  theme_box() %>%
  bg(i = ~ is_pvalue_sign(`p-value`), bg = 'pink')
```
